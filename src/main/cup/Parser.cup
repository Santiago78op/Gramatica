/*
    Siempre se debe definir el paquete
    en el que se encuentra la clase Lexer,
    esto es importante para que el analizador
    lexico pueda encontrar la clase parser.
*/
package com.julian;

// Cup es la clase que contiene los simbolos que
// se usan en el analizador sintactico.
import java_cup.runtime.*;

/*
    Importamos las clases necesarias para el
    funcionamiento del analizador sintactico.
*/
import java.util.ArrayList;
import java.util.List;

/*
    Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores.
*/
parser code {:

    public List<SyntaxError> syntaxErrors = new ArrayList<>();

    // Variables de estado para rastrear el contexto
    private boolean expectingConj = false;
    private boolean expectingOpera = false;
    private boolean expectingEvaluar = false;

    @Override
    public void report_error(String message, Object info) {
        String tipo = "Syntax Error";
        int line = -1;
        int column = -1;
        String incomingToken = "unknown";
        String expectedTokens = "";

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;
            if (s.left >= 0) {
                line = s.left + 1;
            }
            if (s.right >= 0) {
                column = s.right + 1;
            }
            incomingToken = s.value != null ? s.value.toString() : "unknown";
        }

        expectedTokens = expected_token(info);

        String errorMessage = "Se encontró '" + incomingToken + "' y se esperaba " + expectedTokens + ".";
        SyntaxError error = new SyntaxError(tipo, errorMessage, line, column);
        syntaxErrors.add(error);

        System.err.println("Error: " + errorMessage + " at line " + line + ", column " + column);
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal error: " + message);
    }

    private String expected_token(Object info) {
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            // Si se encuentra un COLON, determinar qué token debería haber venido antes
            if (s.sym == sym.COLON) {
                if (expectingConj) {
                    return "\"CONJ\"";
                } else if (expectingOpera) {
                    return "\"OPERA\"";
                } else if (expectingEvaluar) {
                    return "\"EVALUAR\"";
                } else {
                    return "\"CONJ\", \"OPERA\", \"EVALUAR\""; // Caso por defecto si no se puede determinar el contexto
                }
            }

            // Otros casos según el contexto
            else if (s.sym == sym.CONJ) {
                return "\"LBRACE\"";
            } else if (s.sym == sym.SEMICOLON) {
                return "\"ARROW\", \"ID\"";
            } else if (s.sym == sym.ARROW) {
                return "\"ID\", \"NUM\", \"VIRGULILLA\"";
            } else if (s.sym == sym.ID) {
                return "\":\"";
            } else if (s.sym == sym.RBRACE || s.sym == sym.LBRACE) {
                return "\"LBRACE\"";  // Para casos donde se esperaba '{'
            } else {
                return "\"ID\", \"NUM\", \"{\", \"}\", \";\"";  // Otros tokens genéricos
            }
        }

        return "\"ID\", \"NUM\", \"{\", \"}\", \";\""; // Valor por defecto si no se puede determinar
    }

    @Override
    public Symbol parse() {
        try {
            return super.parse();
        } catch (Exception e) {
            System.err.println("Error: Couldn't repair and continue parse");
            e.printStackTrace();
            return null;
        }
    }

:}

/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* Terminales (tokens obtenidos por el analizador lexico).

   Terminales que no tienen un valor son listados primero, los terminales
   que tienen un valor como los enteros son listados en la segunda o demas
   lineas.
*/

// Terminales que no tienen un valor son listados primero.
terminal CONJ, OPERA, EVALUAR, LBRACE, RBRACE, LPAREN, RPAREN,
         ARROW, SEMICOLON, COLON, VIRGULILLA, COMMA, UNION,
         INTERSECCION, COMPLEMENTO, DIFERENCIA;

// Terminales que tienen un valor como los enteros son listados
// en la segunda o demas lineas.
terminal String ID;
terminal Double NUM;

/* ------------- Sección de no terminales ----------- */

/* No terminales usados en la seccion gramatical.

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a
   que no tienen tipo, pudiendo ser entero o String.
*/

non terminal TreeNode<String> BLOCK, CONJ_LIST, CONJ_PART, EXPR_DEF, CONJUNTO_EXPR,
                              OPER_LIST, OPER_PART, OPER_DEF, OPER_EXPR, EVAL_LIST,
                              EVAL_PART, EXPRE_CONJ, SIMBOL_EXPR;

/* ------------- Precedencia y Asociatividad de Terminales ----------- */

/*
   La precedencia de los operadores se define aquí.
   Los operadores en las líneas inferiores tienen mayor precedencia
   que los de las líneas superiores.

   precedence left UNION, INTERSECCION;
   precedence left DIFERENCIA, COMPLEMENTO;
*/

precedence left UNION, INTERSECCION;
precedence left DIFERENCIA, COMPLEMENTO;

/* ------------------- Sección de la gramática ------------------------ */

// Inicia la gramática con el símbolo de inicio.
/* Símbolo de inicio */
start with BLOCK;

/* ------------------- Sección de la gramática ------------------------ */

/* La gramatica de nuestro analizador sintactico.

   Parte de este ejemplo:
   {
       #Definición de conjuntos
       CONJ : conjuntoA -> 1,2,3,a,b ;
       CONJ : conjuntoB -> a~z;
       CONJ : conjuntoC -> 0~9;

       #Definición de operaciones
       OPERA : operacion1 -> & {conjuntoA} {conjuntoB};
       OPERA : operacion2 -> & U {conjuntoB} {conjuntoC} {conjuntoA};

       #Evaluamos conjuntos de datos
       EVALUAR ( {a, b, c} , operacion1 );
       EVALUAR ( {1, b} , operacion1 );
   }
*/

/* Bloque de definiciones */

/* block es el incio de nuestra gramatica. Puede derivar a
   otra operacion 'conj_list' seguida de 'oper_list' y
   finalziando con 'eval_list'.
*/

BLOCK ::= LBRACE:lbrace
                    CONJ_LIST:conj_list
                    OPER_LIST:oper_list
                    EVAL_LIST:eval_list
             RBRACE:rbrace
          {:

                if (lbrace != null) {
                    expectingConj = true;
                    expectingOpera = false;
                    expectingEvaluar = false;
                }else if( rbrace != null){
                    expectingConj = false;
                    expectingOpera = false;
                    expectingEvaluar = false;
                }

                TreeNode<String> blockNode = new TreeNode<>("BLOCK");

                blockNode.addChild(new TreeNode<>(lbrace.toString()));
                blockNode.addChild(conj_list);
                blockNode.addChild(oper_list);
                blockNode.addChild(eval_list);
                blockNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = blockNode;
          :};

/* 'conj_list'  puede derivar a otra 'conj_list' seguida de un
   'conj_part' o puede derivar directamente a un 'conj_part'. */

CONJ_LIST ::= CONJ_LIST:conj_list CONJ_PART:conj_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("CONJ_LIST");

                parentNode.addChild(conj_list);
                parentNode.addChild(conj_part);

                RESULT = parentNode;
            :}
            | CONJ_PART:conj_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("CONJ_LIST");

                parentNode.addChild(conj_part);

                RESULT = parentNode;
            :};

/* La parte 'conj_part' es una combinación de la palabra reservada
   CONJ + COLON seguida del por la definición de un conjunto y
   terminada por el terminal SEMICOLON. El cuerpo de 'expr_def'
   define el nombre del conjunto (ID) y su expresión (conjunto_expr). */

CONJ_PART ::= CONJ:conj COLON:colon EXPR_DEF:expr_def SEMICOLON:semicolon
            {:
                if (colon != null) {
                    expectingConj = false;
                    expectingOpera = true;
                    expectingEvaluar = false;
                }

                TreeNode<String> parentNode = new TreeNode<>("CONJ_PART");

                parentNode.addChild(new TreeNode<>(conj.toString()));
                parentNode.addChild(new TreeNode<>(colon.toString()));
                parentNode.addChild(expr_def);
                parentNode.addChild(new TreeNode<>(semicolon.toString()));

                RESULT = parentNode;
            :};

/* 'expr_def' define un conjunto mediante la asignación de un
   identificador (ID) a una expresión de conjunto (conjunto_expr).
   La expresión puede ser una secuencia de números o identificadores
   separados por comas, o un rango definido con el símbolo VIRGULILLA. */

 EXPR_DEF ::= ID:id ARROW:arrow CONJUNTO_EXPR:conjunto_expr
            {:
                TreeNode<String> parentNode = new TreeNode<>("EXPR_DEF");

                parentNode.addChild(new TreeNode<>(id.toString()));
                parentNode.addChild(new TreeNode<>(arrow.toString()));
                parentNode.addChild(conjunto_expr);

                RESULT = parentNode;
            :};

 /* 'conjunto_expr' define los elementos del conjunto, que pueden
    ser números, identificadores, o un rango de valores definido por
    el símbolo VIRGULILLA. */

CONJUNTO_EXPR ::= CONJUNTO_EXPR:conjunto_expr COMMA:comma NUM:num
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    parentNode.addChild(conjunto_expr);
                    parentNode.addChild(new TreeNode<>(comma.toString()));
                    parentNode.addChild(new TreeNode<>(num.toString()));

                    RESULT = parentNode;
                :}
                | CONJUNTO_EXPR:conjunto_expr COMMA:comma ID:id
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    parentNode.addChild(conjunto_expr);
                    parentNode.addChild(new TreeNode<>(comma.toString()));
                    parentNode.addChild(new TreeNode<>(id.toString()));

                    RESULT = parentNode;    
                :}
                | NUM:num
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    parentNode.addChild(new TreeNode<>(num.toString()));

                    RESULT = parentNode;
                :}
                | ID:id
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    parentNode.addChild(new TreeNode<>(id.toString()));

                    RESULT = parentNode;
                :}
                | ID:id1 VIRGULILLA:virgulilla ID:id2
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    char start = id1.toString().charAt(0);
                    char end = id2.toString().charAt(0);
                    StringBuilder range = new StringBuilder();
                    for (char c = start; c <= end; c++) {
                        range.append(c);
                        if (c != end) {
                            range.append(",");
                        }
                    }

                    parentNode.addChild(new TreeNode<>(range.toString()));

                    RESULT = parentNode;

                :}
                | NUM:num1 VIRGULILLA:virgulilla NUM:num2
                {:
                    TreeNode<String> parentNode = new TreeNode<>("CONJUNTO_EXPR");

                    char start = num1.toString().charAt(0);
                    char end = num2.toString().charAt(0);
                    StringBuilder range = new StringBuilder();
                    for (char c = start; c <= end; c++) {
                        range.append(c);
                        if (c != end) {
                            range.append(",");
                        }
                    }

                    parentNode.addChild(new TreeNode<>(range.toString()));

                    RESULT = parentNode;
                :};
                
/* 'oper_list' define la lista de operaciones, que pueden ser
   operaciones de intersección, unión, complemento, o diferencia
   entre conjuntos. Cada operación está seguida por los conjuntos
   involucrados y terminada por SEMICOLON. */

OPER_LIST ::= OPER_LIST:oper_list OPER_PART:oper_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("OPER_LIST");

                parentNode.addChild(oper_list);
                parentNode.addChild(oper_part);

                RESULT = parentNode;
            :}
            | OPER_PART:oper_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("OPER_LIST");

                parentNode.addChild(oper_part);

                RESULT = parentNode;
            :};

/*
    'oper_part' define una operación mediante la asignación de un
    identificador (ID) a una expresión de operación (oper_expr).
    La expresión puede ser una operación de unión, intersección,
    complemento, o diferencia entre conjuntos. */
OPER_PART ::= OPERA:opera COLON:colon OPER_DEF:oper_def SEMICOLON:semicolon
            {:

                if (opera != null) {
                    expectingConj = false;
                    expectingOpera = false;
                    expectingEvaluar = true;
                }

                TreeNode<String> parentNode = new TreeNode<>("OPER_PART");

                parentNode.addChild(new TreeNode<>(opera.toString()));
                parentNode.addChild(new TreeNode<>(colon.toString()));
                parentNode.addChild(oper_def);
                parentNode.addChild(new TreeNode<>(semicolon.toString()));

                RESULT = parentNode;
            :};

/* 'oper_def' define una operación mediante la asignación de un
    identificador (ID) a una expresión de operación (oper_expr).
    La expresión puede ser una operación de unión, intersección,
    complemento, o diferencia entre conjuntos. */
OPER_DEF ::= ID:id ARROW:arrow OPER_EXPR:oper_expr EXPRE_CONJ:expre_conj
            {:
                TreeNode<String> parentNode = new TreeNode<>("OPER_DEF");

                parentNode.addChild(new TreeNode<>(id.toString()));
                parentNode.addChild(new TreeNode<>(arrow.toString()));
                parentNode.addChild(oper_expr);
                parentNode.addChild(expre_conj);

                RESULT = parentNode;
            :};

/* 'oper_expr' define las operaciones entre conjuntos, que pueden
    ser operaciones de unión, intersección, complemento, o diferencia
    entre conjuntos. Cada operación está seguida por los conjuntos
    involucrados. */

OPER_EXPR ::= OPER_EXPR:oper_expr SIMBOL_EXPR:simbol_expr
            {:
                TreeNode<String> parentNode = new TreeNode<>("OPER_EXPR");

                parentNode.addChild(oper_expr);
                parentNode.addChild(simbol_expr);

                RESULT = parentNode;    
            :}
            | SIMBOL_EXPR:simbol_expr
            {:
                TreeNode<String> parentNode = new TreeNode<>("OPER_EXPR");

                parentNode.addChild(simbol_expr);

                RESULT = parentNode;
            :};

SIMBOL_EXPR ::= UNION:union
            {:
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");
                
                simbol_expr.addChild(new TreeNode<>(union.toString()));
                
                RESULT = simbol_expr;
            :}
            | INTERSECCION:interseccion
            {:
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");
                
                simbol_expr.addChild(new TreeNode<>(interseccion.toString()));
                
                RESULT = simbol_expr;
            :}
            | COMPLEMENTO:complemento
            {:
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");
                
                simbol_expr.addChild(new TreeNode<>(complemento.toString()));
                
                RESULT = simbol_expr;   
            :}
            | DIFERENCIA:diferencia
            {:
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");
                
                simbol_expr.addChild(new TreeNode<>(diferencia.toString()));
                
                RESULT = simbol_expr;   
            :};

EXPRE_CONJ ::= EXPRE_CONJ:expre_conj LBRACE:lbrace CONJUNTO_EXPR:conjunto_expr RBRACE:rbrace
            {:
                TreeNode<String> parentNode = new TreeNode<>("EXPRE_CONJ");

                parentNode.addChild(expre_conj);
                parentNode.addChild(new TreeNode<>(lbrace.toString()));
                parentNode.addChild(conjunto_expr);
                parentNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = parentNode;
            :}
            | LBRACE:lbrace CONJUNTO_EXPR:conjunto_expr RBRACE:rbrace
            {:
                TreeNode<String> parentNode = new TreeNode<>("EXPRE_CONJ");

                parentNode.addChild(new TreeNode<>(lbrace.toString()));
                parentNode.addChild(conjunto_expr);
                parentNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = parentNode;
            :};

/*
    'eval_list' define la lista de evaluaciones de conjuntos, que
    pueden ser evaluaciones de conjuntos de datos con operaciones
    de intersección, unión, complemento, o diferencia entre conjuntos.
    Cada evaluación está seguida por los conjuntos de datos y la
    operación involucrada y terminada por SEMICOLON. */

EVAL_LIST ::= EVAL_LIST:eval_list EVAL_PART:eval_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("EVAL_LIST");

                parentNode.addChild(eval_list);
                parentNode.addChild(eval_part);

                RESULT = parentNode;
            :}
            | EVAL_PART:eval_part
            {:
                TreeNode<String> parentNode = new TreeNode<>("EVAL_LIST");

                parentNode.addChild(eval_part);

                RESULT = parentNode;    
            :};

/*
    'eval_part' define una evaluación de conjuntos mediante la
    asignación de un identificador (ID) a una expresión de
    evaluación (eval_expr). La expresión puede ser una evaluación
    de conjuntos de datos con operaciones de intersección, unión,
    complemento, o diferencia entre conjuntos. */

EVAL_PART ::= EVALUAR:evaluar 
                LPAREN:lparen
                    LBRACE:lbrace CONJUNTO_EXPR:conjunto_expr RBRACE:rbrace COMMA:comma ID:id
                RPAREN:rparen SEMICOLON:semicolon
                {:

                    if (evaluar != null) {
                        expectingConj = false;
                        expectingOpera = false;
                        expectingEvaluar = false;
                    }

                    TreeNode<String> evalPart = new TreeNode<>("EVAL_PART");

                    evalPart.addChild(new TreeNode<>(evaluar.toString()));
                    evalPart.addChild(new TreeNode<>(lparen.toString()));
                    evalPart.addChild(new TreeNode<>(lbrace.toString()));
                    evalPart.addChild(conjunto_expr);
                    evalPart.addChild(new TreeNode<>(rbrace.toString()));
                    evalPart.addChild(new TreeNode<>(comma.toString()));
                    evalPart.addChild(new TreeNode<>(id.toString()));
                    evalPart.addChild(new TreeNode<>(rparen.toString()));
                    evalPart.addChild(new TreeNode<>(semicolon.toString()));

                    RESULT = evalPart;
                :};