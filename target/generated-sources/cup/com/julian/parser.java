
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.julian;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\005\005" +
    "\000\002\005\007\000\002\006\005\000\002\006\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\011\006\000\002\012\004\000\002\012\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\015\006\000\002\015\005\000\002\013\004" +
    "\000\002\013\003\000\002\014\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\041\004\001\002\000\004\051\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\051\ufffe\052\ufffe\001\002\000\004\025\126\001" +
    "\002\000\006\051\010\052\013\001\002\000\006\051\uffff" +
    "\052\uffff\001\002\000\004\025\103\001\002\000\006\052" +
    "\uffd3\053\uffd3\001\002\000\006\052\013\053\016\001\002" +
    "\000\004\015\024\001\002\000\006\043\uffc7\053\uffc7\001" +
    "\002\000\006\052\uffd4\053\uffd4\001\002\000\006\043\023" +
    "\053\016\001\002\000\006\043\uffc8\053\uffc8\001\002\000" +
    "\004\002\000\001\002\000\004\041\025\001\002\000\112" +
    "\004\055\005\050\007\063\010\026\011\036\012\070\013" +
    "\060\014\052\015\037\016\041\017\031\020\051\021\047" +
    "\022\040\023\054\024\033\025\064\026\043\027\045\030" +
    "\032\031\061\032\072\033\073\034\030\035\035\036\057" +
    "\037\044\040\067\041\066\042\046\043\071\044\042\045" +
    "\065\046\062\047\056\050\027\001\002\000\012\021\ufff7" +
    "\026\ufff7\043\ufff7\044\ufff7\001\002\000\012\021\uffd7\026" +
    "\uffd7\043\uffd7\044\uffd7\001\002\000\012\021\uffe3\026\uffe3" +
    "\043\uffe3\044\uffe3\001\002\000\012\021\ufff0\026\ufff0\043" +
    "\ufff0\044\ufff0\001\002\000\012\021\uffe7\026\uffe7\043\uffe7" +
    "\044\uffe7\001\002\000\012\021\uffeb\026\uffeb\043\uffeb\044" +
    "\uffeb\001\002\000\012\021\ufff9\026\ufff9\043\ufff9\044\ufff9" +
    "\001\002\000\012\021\uffe2\026\uffe2\043\uffe2\044\uffe2\001" +
    "\002\000\012\021\ufff6\026\ufff6\043\ufff6\044\ufff6\001\002" +
    "\000\012\021\ufff2\026\ufff2\043\ufff2\044\ufff2\001\002\000" +
    "\012\021\uffed\026\uffed\043\uffed\044\uffed\001\002\000\012" +
    "\021\ufff1\026\ufff1\043\ufff1\044\ufff1\001\002\000\012\021" +
    "\uffdb\026\uffdb\043\uffdb\044\uffdb\001\002\000\012\021\uffe9" +
    "\026\uffe9\043\uffe9\044\uffe9\001\002\000\012\021\uffe0\026" +
    "\uffe0\043\uffe0\044\uffe0\001\002\000\012\021\uffe8\026\uffe8" +
    "\043\uffe8\044\uffe8\001\002\000\012\021\uffdd\026\uffdd\043" +
    "\uffdd\044\uffdd\001\002\000\012\021\uffee\026\uffee\043\uffee" +
    "\044\uffee\001\002\000\012\021\uffd5\026\uffd5\043\uffd5\044" +
    "\uffd5\001\002\000\012\021\uffef\026\uffef\043\uffef\044\uffef" +
    "\001\002\000\012\021\ufff3\026\ufff3\043\ufff3\044\ufff3\001" +
    "\002\000\006\021\074\043\075\001\002\000\012\021\uffec" +
    "\026\uffec\043\uffec\044\uffec\001\002\000\012\021\uffd6\026" +
    "\uffd6\043\uffd6\044\uffd6\001\002\000\012\021\uffd8\026\uffd8" +
    "\043\uffd8\044\uffd8\001\002\000\012\021\uffe1\026\uffe1\043" +
    "\uffe1\044\uffe1\001\002\000\012\021\ufff4\026\ufff4\043\ufff4" +
    "\044\ufff4\001\002\000\012\021\uffe6\026\uffe6\043\uffe6\044" +
    "\uffe6\001\002\000\012\021\uffd9\026\uffd9\043\uffd9\044\uffd9" +
    "\001\002\000\012\021\ufff8\026\ufff8\043\ufff8\044\ufff8\001" +
    "\002\000\012\021\uffea\026\uffea\043\uffea\044\uffea\001\002" +
    "\000\012\021\uffda\026\uffda\043\uffda\044\uffda\001\002\000" +
    "\012\021\uffde\026\uffde\043\uffde\044\uffde\001\002\000\012" +
    "\021\uffdf\026\uffdf\043\uffdf\044\uffdf\001\002\000\012\021" +
    "\ufff5\026\ufff5\043\ufff5\044\ufff5\001\002\000\012\021\uffdc" +
    "\026\uffdc\043\uffdc\044\uffdc\001\002\000\012\021\uffe5\026" +
    "\uffe5\043\uffe5\044\uffe5\001\002\000\012\021\uffe4\026\uffe4" +
    "\043\uffe4\044\uffe4\001\002\000\112\004\055\005\050\007" +
    "\063\010\026\011\036\012\070\013\060\014\052\015\037" +
    "\016\041\017\031\020\051\021\047\022\040\023\054\024" +
    "\033\025\064\026\043\027\045\030\032\031\061\032\072" +
    "\033\073\034\030\035\035\036\057\037\044\040\067\041" +
    "\066\042\046\043\071\044\042\045\065\046\062\047\056" +
    "\050\027\001\002\000\004\021\076\001\002\000\004\004" +
    "\077\001\002\000\004\016\100\001\002\000\004\026\101" +
    "\001\002\000\006\043\uffc6\053\uffc6\001\002\000\012\021" +
    "\ufffa\026\ufffa\043\ufffa\044\ufffa\001\002\000\004\004\104" +
    "\001\002\000\004\006\107\001\002\000\004\026\106\001" +
    "\002\000\006\052\uffd2\053\uffd2\001\002\000\012\045\112" +
    "\046\111\047\114\050\113\001\002\000\014\041\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\014\041\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\050\uffcd\001\002\000\014\041" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\001\002\000\014" +
    "\041\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001\002\000" +
    "\014\041\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002" +
    "\000\014\041\120\045\112\046\111\047\114\050\113\001" +
    "\002\000\006\026\uffd1\041\123\001\002\000\014\041\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\112\004" +
    "\055\005\050\007\063\010\026\011\036\012\070\013\060" +
    "\014\052\015\037\016\041\017\031\020\051\021\047\022" +
    "\040\023\054\024\033\025\064\026\043\027\045\030\032" +
    "\031\061\032\072\033\073\034\030\035\035\036\057\037" +
    "\044\040\067\041\066\042\046\043\071\044\042\045\065" +
    "\046\062\047\056\050\027\001\002\000\006\021\074\043" +
    "\122\001\002\000\006\026\uffc9\041\uffc9\001\002\000\112" +
    "\004\055\005\050\007\063\010\026\011\036\012\070\013" +
    "\060\014\052\015\037\016\041\017\031\020\051\021\047" +
    "\022\040\023\054\024\033\025\064\026\043\027\045\030" +
    "\032\031\061\032\072\033\073\034\030\035\035\036\057" +
    "\037\044\040\067\041\066\042\046\043\071\044\042\045" +
    "\065\046\062\047\056\050\027\001\002\000\006\021\074" +
    "\043\125\001\002\000\006\026\uffca\041\uffca\001\002\000" +
    "\004\004\127\001\002\000\004\006\132\001\002\000\004" +
    "\026\131\001\002\000\006\051\ufffd\052\ufffd\001\002\000" +
    "\112\004\055\005\050\007\063\010\026\011\036\012\070" +
    "\013\060\014\052\015\037\016\041\017\031\020\051\021" +
    "\047\022\040\023\054\024\033\025\064\026\043\027\045" +
    "\030\032\031\061\032\072\033\073\034\030\035\035\036" +
    "\057\037\044\040\067\041\066\042\046\043\071\044\042" +
    "\045\065\046\062\047\056\050\027\001\002\000\010\021" +
    "\074\026\ufffc\044\134\001\002\000\112\004\055\005\050" +
    "\007\063\010\026\011\036\012\070\013\060\014\052\015" +
    "\037\016\041\017\031\020\051\021\047\022\040\023\054" +
    "\024\033\025\064\026\043\027\045\030\032\031\061\032" +
    "\072\033\073\034\030\035\035\036\057\037\044\040\067" +
    "\041\066\042\046\043\071\044\042\045\065\046\062\047" +
    "\056\050\027\001\002\000\006\021\074\026\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\002\004\001\001\000\006\003\010\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\011\007\014\010" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\017\013\020\014\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\052\017\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\114\016\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\115\016\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\120\017" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\123\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\132\017\033\001" +
    "\001\000\002\001\001\000\006\006\134\017\033\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public List<SyntaxError> syntaxErrors = new ArrayList<>();

    public int getCurrentParserState(){
        return ((Symbol) stack.peek()).parse_state;
    }

    @Override
    public void report_error(String message, Object info) {
        // Obtine el estado actual del parser
        int currentState = getCurrentParserState();

        // Inicialisamos las lineas y columnas
        int line = -1;
        int column = -1;

        String incomingToken = "unknown";

        if (info instanceof Symbol) {
           Symbol s = (Symbol) info;
           if (s.left >= 0) {
               line = s.left + 1;
           }
           if (s.right >= 0) {
               column = s.right + 1;
           }
           incomingToken = s.value.toString();
        }

        // Obtener los tokens esperados
        String expectedTokens = getExpectedTokensForCurrentState(currentState);

        String errorMessage = "Se encontró '" + incomingToken + "' en el estado " + currentState + " y se esperaba " + expectedTokens + ".";
        SyntaxError error = new SyntaxError("Syntax Error", errorMessage, line, column);
        if (!syntaxErrors.contains(error)) {
           syntaxErrors.add(error);
        }
        System.err.println("Error: " + errorMessage);
    }

    private String getExpectedTokensForCurrentState(int currentState) {
        StringBuilder expectedTokens = new StringBuilder();

        // Obtener la tabla de acciones
        short[][] actionTable = action_table();

        int lenthTokens = actionTable.length;
        // Verifica si el elemento actual está dentro del rango de la tabla
        if (currentState >= 0 && currentState <= lenthTokens) {
            short[] actionsForCurrentStates = actionTable[currentState];

            int curr = actionsForCurrentStates.length;
            // Itera sobre los posibles tokens terminales
            for (int i = 0; i < curr; i++){
                int actionLenth = actionsForCurrentStates[i];
                if (actionLenth > 0) {
                    int expectedLength = expectedTokens.length();
                    if (expectedLength > 0) {
                        expectedTokens.append(", ");
                    }
                    if (actionLenth < 21) {
                        expectedTokens.append(sym.terminalNames[actionLenth]);
                    }

                }
            }
        }

        return expectedTokens.toString();
    }


    @Override
    public Symbol parse() {
        try {
            return super.parse();
        } catch (Exception e) {
            System.err.println("Error: Couldn't repair and continue parse");
            // e.printStackTrace();
            return null;
        }
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= BLOCK EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> start_val = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // BLOCK ::= LBRACE CONJ_LIST OPER_LIST EVAL_LIST RBRACE 
            {
              TreeNode<String> RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conj_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conj_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TreeNode<String> conj_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oper_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode<String> oper_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eval_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eval_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> eval_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> blockNode = new TreeNode<>("BLOCK");

                blockNode.addChild(new TreeNode<>(lbrace.toString()));
                blockNode.addChild(conj_list);
                blockNode.addChild(oper_list);
                blockNode.addChild(eval_list);
                blockNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = blockNode;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOCK",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONJ_LIST ::= CONJ_LIST CONJ_PART 
            {
              TreeNode<String> RESULT =null;
		int conj_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conj_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> conj_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conj_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conj_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> conj_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("CONJ_LIST");

                parentNode.addChild(conj_list);
                parentNode.addChild(conj_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJ_LIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONJ_LIST ::= CONJ_PART 
            {
              TreeNode<String> RESULT =null;
		int conj_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conj_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> conj_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("CONJ_LIST");

                parentNode.addChild(conj_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJ_LIST",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONJ_PART ::= CONJ COLON EXPR_DEF SEMICOLON 
            {
              TreeNode<String> RESULT =null;
		int conjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conjright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object conj = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> expr_def = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("CONJ_PART");

                parentNode.addChild(new TreeNode<>(conj.toString()));
                parentNode.addChild(new TreeNode<>(colon.toString()));
                parentNode.addChild(expr_def);
                parentNode.addChild(new TreeNode<>(semicolon.toString()));

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJ_PART",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPR_DEF ::= ID ARROW CONJUNTO_EXPR 
            {
              TreeNode<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int arrowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int arrowright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object arrow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conjunto_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conjunto_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> conjunto_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_DEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPR_DEF ::= ID ARROW CONJUNTO_EXPR VIRGULILLA CONJUNTO_EXPR 
            {
              TreeNode<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrowright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object arrow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int conjunto_expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conjunto_expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode<String> conjunto_expr1 = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int virgulillaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int virgulillaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object virgulilla = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int conjunto_expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conjunto_expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> conjunto_expr2 = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR_DEF",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONJUNTO_EXPR ::= CONJUNTO_EXPR COMMA EXPR 
            {
              TreeNode<String> RESULT =null;
		int conjunto_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int conjunto_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode<String> conjunto_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_EXPR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJUNTO_EXPR ::= EXPR 
            {
              TreeNode<String> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_EXPR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // EXPR ::= XCLAM 
            {
              TreeNode<String> RESULT =null;
		int exclamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exclamright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exclam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // EXPR ::= TWOQUOTE 
            {
              TreeNode<String> RESULT =null;
		int twoquoteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int twoquoteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object twoquote = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // EXPR ::= HASH 
            {
              TreeNode<String> RESULT =null;
		int hashleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hashright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hash = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPR ::= DOLLAR 
            {
              TreeNode<String> RESULT =null;
		int dolarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dolarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dolar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPR ::= PERCENT 
            {
              TreeNode<String> RESULT =null;
		int percentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int percentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object percent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPR ::= ONEQUOTE 
            {
              TreeNode<String> RESULT =null;
		int onequoteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int onequoteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object onequote = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPR ::= LPAREN 
            {
              TreeNode<String> RESULT =null;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPR ::= RPAREN 
            {
              TreeNode<String> RESULT =null;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPR ::= ASTERISK 
            {
              TreeNode<String> RESULT =null;
		int asteriskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asteriskright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object asterisk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPR ::= PLUS 
            {
              TreeNode<String> RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPR ::= COMMA 
            {
              TreeNode<String> RESULT =null;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPR ::= MINUS 
            {
              TreeNode<String> RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPR ::= DOT 
            {
              TreeNode<String> RESULT =null;
		int dotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dotright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPR ::= SLASH 
            {
              TreeNode<String> RESULT =null;
		int slashleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slashright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object slash = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPR ::= COLON 
            {
              TreeNode<String> RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPR ::= SEMICOLON 
            {
              TreeNode<String> RESULT =null;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPR ::= LESSTHAN 
            {
              TreeNode<String> RESULT =null;
		int lessthanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessthanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lessthan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPR ::= EQUALS 
            {
              TreeNode<String> RESULT =null;
		int equalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int equalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object equal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPR ::= GRATHTHAN 
            {
              TreeNode<String> RESULT =null;
		int graththanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int graththanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object graththan = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPR ::= QUESTION 
            {
              TreeNode<String> RESULT =null;
		int questionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int questionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object question = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPR ::= AT 
            {
              TreeNode<String> RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPR ::= LBRACKET 
            {
              TreeNode<String> RESULT =null;
		int lbracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lbracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lbracket = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPR ::= BACKSLASH 
            {
              TreeNode<String> RESULT =null;
		int backslashleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int backslashright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object backslash = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPR ::= RBRACKET 
            {
              TreeNode<String> RESULT =null;
		int rbracketleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbracketright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rbracket = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPR ::= UNDERSCOR 
            {
              TreeNode<String> RESULT =null;
		int underscorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int underscorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object underscor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPR ::= BACKTICK 
            {
              TreeNode<String> RESULT =null;
		int backtickleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int backtickright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object backtick = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPR ::= LBRACE 
            {
              TreeNode<String> RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPR ::= OR 
            {
              TreeNode<String> RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPR ::= RBRACE 
            {
              TreeNode<String> RESULT =null;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPR ::= VIRGULILLA 
            {
              TreeNode<String> RESULT =null;
		int virgulillaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int virgulillaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object virgulilla = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPR ::= UNION 
            {
              TreeNode<String> RESULT =null;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object union = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPR ::= INTERSECCION 
            {
              TreeNode<String> RESULT =null;
		int interseccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int interseccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object interseccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPR ::= COMPLEMENTO 
            {
              TreeNode<String> RESULT =null;
		int complementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int complementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object complemento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPR ::= DIFERENCIA 
            {
              TreeNode<String> RESULT =null;
		int diferencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diferenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object diferencia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPR ::= ID 
            {
              TreeNode<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPR ::= NUM 
            {
              TreeNode<String> RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPER_LIST ::= OPER_LIST OPER_PART 
            {
              TreeNode<String> RESULT =null;
		int oper_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> oper_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> oper_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_LIST");

                parentNode.addChild(oper_list);
                parentNode.addChild(oper_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_LIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPER_LIST ::= OPER_PART 
            {
              TreeNode<String> RESULT =null;
		int oper_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> oper_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_LIST");

                parentNode.addChild(oper_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_LIST",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPER_PART ::= OPERA COLON OPER_DEF SEMICOLON 
            {
              TreeNode<String> RESULT =null;
		int operaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int operaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object opera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper_defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper_defright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> oper_def = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_PART");

                parentNode.addChild(new TreeNode<>(opera.toString()));
                parentNode.addChild(new TreeNode<>(colon.toString()));
                parentNode.addChild(oper_def);
                parentNode.addChild(new TreeNode<>(semicolon.toString()));

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_PART",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPER_DEF ::= ID ARROW OPER_EXPR EXPRE_CONJ 
            {
              TreeNode<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int arrowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrowright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arrow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oper_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> oper_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expre_conjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expre_conjright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> expre_conj = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_DEF");

                parentNode.addChild(new TreeNode<>(id.toString()));
                parentNode.addChild(new TreeNode<>(arrow.toString()));
                parentNode.addChild(oper_expr);
                parentNode.addChild(expre_conj);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_DEF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPER_EXPR ::= OPER_EXPR SIMBOL_EXPR 
            {
              TreeNode<String> RESULT =null;
		int oper_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oper_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> oper_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int simbol_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbol_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> simbol_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_EXPR");

                parentNode.addChild(oper_expr);
                parentNode.addChild(simbol_expr);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_EXPR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPER_EXPR ::= SIMBOL_EXPR 
            {
              TreeNode<String> RESULT =null;
		int simbol_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simbol_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> simbol_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("OPER_EXPR");

                parentNode.addChild(simbol_expr);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPER_EXPR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIMBOL_EXPR ::= UNION 
            {
              TreeNode<String> RESULT =null;
		int unionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object union = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");

                simbol_expr.addChild(new TreeNode<>(union.toString()));

                RESULT = simbol_expr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOL_EXPR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIMBOL_EXPR ::= INTERSECCION 
            {
              TreeNode<String> RESULT =null;
		int interseccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int interseccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object interseccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");

                simbol_expr.addChild(new TreeNode<>(interseccion.toString()));

                RESULT = simbol_expr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOL_EXPR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIMBOL_EXPR ::= COMPLEMENTO 
            {
              TreeNode<String> RESULT =null;
		int complementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int complementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object complemento = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");

                simbol_expr.addChild(new TreeNode<>(complemento.toString()));

                RESULT = simbol_expr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOL_EXPR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMBOL_EXPR ::= DIFERENCIA 
            {
              TreeNode<String> RESULT =null;
		int diferencialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diferenciaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object diferencia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> simbol_expr = new TreeNode<>("SIMBOL_EXPR");

                simbol_expr.addChild(new TreeNode<>(diferencia.toString()));

                RESULT = simbol_expr;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOL_EXPR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRE_CONJ ::= EXPRE_CONJ LBRACE CONJUNTO_EXPR RBRACE 
            {
              TreeNode<String> RESULT =null;
		int expre_conjleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expre_conjright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TreeNode<String> expre_conj = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conjunto_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conjunto_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> conjunto_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("EXPRE_CONJ");

                parentNode.addChild(expre_conj);
                parentNode.addChild(new TreeNode<>(lbrace.toString()));
                parentNode.addChild(conjunto_expr);
                parentNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CONJ",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRE_CONJ ::= LBRACE CONJUNTO_EXPR RBRACE 
            {
              TreeNode<String> RESULT =null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conjunto_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conjunto_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> conjunto_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("EXPRE_CONJ");

                parentNode.addChild(new TreeNode<>(lbrace.toString()));
                parentNode.addChild(conjunto_expr);
                parentNode.addChild(new TreeNode<>(rbrace.toString()));

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRE_CONJ",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EVAL_LIST ::= EVAL_LIST EVAL_PART 
            {
              TreeNode<String> RESULT =null;
		int eval_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eval_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode<String> eval_list = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eval_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eval_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> eval_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("EVAL_LIST");

                parentNode.addChild(eval_list);
                parentNode.addChild(eval_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVAL_LIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EVAL_LIST ::= EVAL_PART 
            {
              TreeNode<String> RESULT =null;
		int eval_partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eval_partright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode<String> eval_part = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                TreeNode<String> parentNode = new TreeNode<>("EVAL_LIST");

                parentNode.addChild(eval_part);

                RESULT = parentNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVAL_LIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EVAL_PART ::= EVALUAR LPAREN LBRACE CONJUNTO_EXPR RBRACE COMMA ID RPAREN SEMICOLON 
            {
              TreeNode<String> RESULT =null;
		int evaluarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int evaluarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object evaluar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object lparen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int conjunto_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int conjunto_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TreeNode<String> conjunto_expr = (TreeNode<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rbraceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rbraceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object rbrace = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rparenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rparenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rparen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int semicolonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int semicolonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object semicolon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    TreeNode<String> evalPart = new TreeNode<>("EVAL_PART");

                    evalPart.addChild(new TreeNode<>(evaluar.toString()));
                    evalPart.addChild(new TreeNode<>(lparen.toString()));
                    evalPart.addChild(new TreeNode<>(lbrace.toString()));
                    evalPart.addChild(conjunto_expr);
                    evalPart.addChild(new TreeNode<>(rbrace.toString()));
                    evalPart.addChild(new TreeNode<>(comma.toString()));
                    evalPart.addChild(new TreeNode<>(id.toString()));
                    evalPart.addChild(new TreeNode<>(rparen.toString()));
                    evalPart.addChild(new TreeNode<>(semicolon.toString()));

                    RESULT = evalPart;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EVAL_PART",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
